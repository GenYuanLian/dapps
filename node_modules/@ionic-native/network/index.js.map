{"version":3,"sources":["../../../src/@ionic-native/plugins/network/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,MAAA,EAAQ,YAAA,EAAc,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACvG,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,2BAAA,CAA4B;AAKnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AASH,IAAa,OAAO;IAAS,2BAAiB;IAA9C;;IAmDA,CAAC;IAnCC;;;OAGG;IAEH,0BAAQ,GAAR;QACE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IAKH,8BAAY,GAAZ,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C;;;OAGG;IAKH,2BAAS,GAAT,cAA+B,MAAM,CAAC,CAAC,CAAC;IAQ1C,cAAC;AAAD,CAnDA,AAmDC,CAnD4B,iBAAiB,GAmD7C;AANM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CALC;AAtCA;IADC,eAAe;;qCACH;AAOb;IADC,eAAe;;4CACI;AAOpB;IADC,YAAY,EAAE;;;oCACH,UAAU;uCAErB;AAUD;IAJC,OAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,SAAS;KACjB,CAAC;;;oCACc,UAAU;2CAAiB;AAU3C;IAJC,OAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,QAAQ;KAChB,CAAC;;;oCACW,UAAU;wCAAiB;AA3C7B,OAAO;IARnB,MAAM,CAAC;QACN,UAAU,EAAE,SAAS;QACrB,MAAM,EAAE,oCAAoC;QAC5C,IAAI,EAAE,8DAA8D;QACpE,SAAS,EAAE,CAAC,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,eAAe,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,CAAC;QAC1I,SAAS,EAAE,sBAAsB;KAClC,CAAC;GAEW,OAAO,CAmDnB;SAnDY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaProperty, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/merge';\r\n\r\n\r\ndeclare const navigator: any;\r\n\r\n/**\r\n * @name Network\r\n * @description\r\n * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Network } from '@ionic-native/network';\r\n *\r\n * constructor(private network: Network) { }\r\n *\r\n * ...\r\n *\r\n * // watch network for a disconnect\r\n * let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\r\n *   console.log('network was disconnected :-(');\r\n * });\r\n *\r\n * // stop disconnect watch\r\n * disconnectSubscription.unsubscribe();\r\n *\r\n *\r\n * // watch network for a connection\r\n * let connectSubscription = this.network.onConnect().subscribe(() => {\r\n *   console.log('network connected!');\r\n *   // We just got a connection but we need to wait briefly\r\n *â€¨   // before we determine the connection type. Might need to wait.\r\n *   // prior to doing any api requests as well.\r\n *   setTimeout(() => {\r\n *     if (this.network.type === 'wifi') {\r\n *       console.log('we got a wifi connection, woohoo!');\r\n *     }\r\n *   }, 3000);\r\n * });\r\n *\r\n * // stop connect watch\r\n * connectSubscription.unsubscribe();\r\n *\r\n * ```\r\n * @advanced\r\n * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\r\n */\r\n@Plugin({\r\n  pluginName: 'Network',\r\n  plugin: 'cordova-plugin-network-information',\r\n  repo: 'https://github.com/apache/cordova-plugin-network-information',\r\n  platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser'],\r\n  pluginRef: 'navigator.connection'\r\n})\r\n\r\nexport class Network extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Connection type\r\n   * @return {string}\r\n   */\r\n  @CordovaProperty\r\n  type: string;\r\n\r\n  /**\r\n   * Downlink Max Speed\r\n   * @return {string}\r\n   */\r\n  @CordovaProperty\r\n  downlinkMax: string;\r\n\r\n  /**\r\n   * Returns an observable to watch connection changes\r\n   * @return {Observable<any>}\r\n   */\r\n  @CordovaCheck()\r\n  onchange(): Observable<any> {\r\n    return Observable.merge(this.onConnect(), this.onDisconnect());\r\n  }\r\n\r\n  /**\r\n   * Get notified when the device goes offline\r\n   * @returns {Observable<any>} Returns an observable.\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'offline'\r\n  })\r\n  onDisconnect(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Get notified when the device goes online\r\n   * @returns {Observable<any>} Returns an observable.\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'online'\r\n  })\r\n  onConnect(): Observable<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}