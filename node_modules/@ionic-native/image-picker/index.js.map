{"version":3,"sources":["../../../src/@ionic-native/plugins/image-picker/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA6BxE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AASH,IAAa,WAAW;IAAS,+BAAiB;IAAlD;;IAoCA,CAAC;IAnCC;;;;;OAKG;IAIH,iCAAW,GAAX,UAAY,OAA2B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElE;;;OAGG;IAIH,uCAAiB,GAAjB,cAAwC,MAAM,CAAC,CAAC,CAAC;IAEjD;;;OAGG;IAIH,2CAAqB,GAArB,cAAwC,MAAM,CAAC,CAAC,CAAC;IAQnD,kBAAC;AAAD,CApCA,AAoCC,CApCgC,iBAAiB,GAoCjD;AANM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAzBA;IAHC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;8CACgE;AASlE;IAHC,OAAO,CAAC;QACP,SAAS,EAAE,CAAC,SAAS,CAAC;KACvB,CAAC;;;;oDAC+C;AASjD;IAHC,OAAO,CAAC;QACP,SAAS,EAAE,CAAC,SAAS,CAAC;KACvB,CAAC;;;;wDAC+C;AA5BtC,WAAW;IARvB,MAAM,CAAC;QACN,UAAU,EAAE,aAAa;QACzB,MAAM,EAAE,yDAAyD;QACjE,SAAS,EAAE,oBAAoB;QAC/B,IAAI,EAAE,yDAAyD;QAC/D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,WAAW,CAoCvB;SApCY,WAAW","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\nexport interface ImagePickerOptions {\r\n  /**\r\n   * max images to be selected, defaults to 15. If this is set to 1, upon selection of a single image, the plugin will return it. (Android only)\r\n   */\r\n  maximumImagesCount?: number;\r\n\r\n  /**\r\n   * Max width to allow images to be\r\n   */\r\n  width?: number;\r\n  /**\r\n   * Max height to allow images to be\r\n   */\r\n  height?: number;\r\n\r\n  /**\r\n   * Quality of images, defaults to 100\r\n   */\r\n  quality?: number;\r\n\r\n  /**\r\n   * Output type, defaults to 0  (FILE_URI).\r\n   */\r\n  outputType?: number;\r\n}\r\n\r\n/**\r\n * @name Image Picker\r\n * @description\r\n * Cordova Plugin For Multiple Image Selection\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-image-picker`.\r\n * For more info, please see the https://github.com/wymsee/cordova-imagePicker\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { ImagePicker } from '@ionic-native/image-picker';\r\n *\r\n *\r\n * constructor(private imagePicker: ImagePicker) { }\r\n *\r\n * ...\r\n *\r\n * this.imagePicker.getPictures(options).then((results) => {\r\n *   for (var i = 0; i < results.length; i++) {\r\n *       console.log('Image URI: ' + results[i]);\r\n *   }\r\n * }, (err) => { });\r\n *\r\n * ```\r\n * @interfaces\r\n * ImagePickerOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'ImagePicker',\r\n  plugin: 'https://github.com/Telerik-Verified-Plugins/ImagePicker',\r\n  pluginRef: 'window.imagePicker',\r\n  repo: 'https://github.com/Telerik-Verified-Plugins/ImagePicker',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class ImagePicker extends IonicNativePlugin {\r\n  /**\r\n   * Pick pictures from the library.\r\n   * @param {ImagePickerOptions} options\r\n   * @returns {Promise<any>} Returns a Promise that resolves the image file URI\r\n   * otherwise rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  getPictures(options: ImagePickerOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Check if we have permission to read images\r\n   * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates whether we have permission\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  hasReadPermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Request permission to read images\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  requestReadPermission(): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}