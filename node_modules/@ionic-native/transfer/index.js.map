{"version":3,"sources":["../../../src/@ionic-native/plugins/transfer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,eAAA,EAAiB,MAAA,EAAQ,aAAA,EAAe,iBAAA,EAAmB,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA6GlH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+DG;AAQH,IAAa,QAAQ;IAAS,4BAAiB;IAP/C;QAAA,qEAyCC;QAhCC;;;;;;;;;WASG;QACH,2BAAqB,GAAG;YACtB,kBAAkB,EAAE,CAAC;YACrB,eAAe,EAAE,CAAC;YAClB,cAAc,EAAE,CAAC;YACjB,SAAS,EAAE,CAAC;YACZ,gBAAgB,EAAE,CAAC;SACpB,CAAC;;IAgBJ,CAAC;IAdC;;;OAGG;IACH,yBAAM,GAAN;QACE,MAAM,CAAC,IAAI,cAAc,EAAE,CAAC;IAC9B,CAAC;IAQH,eAAC;AAAD,CAlCA,AAkCC,CAlC6B,iBAAiB,GAkC9C;AANM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAjCW,QAAQ;IAPpB,MAAM,CAAC;QACN,UAAU,EAAE,cAAc;QAC1B,MAAM,EAAE,8BAA8B;QACtC,SAAS,EAAE,cAAc;QACzB,IAAI,EAAE,wDAAwD;KAC/D,CAAC;GAEW,QAAQ,CAkCpB;SAlCY,QAAQ;AAoCrB;;GAEG;AAKH,IAAa,cAAc;IAGzB;QACE,EAAE,CAAC,CAAC,iBAAiB,CAAC,cAAc,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,eAAe,GAAG,IAAI,YAAY,EAAE,CAAC;QAC5C,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IAKH,+BAAM,GAAN,UAAO,OAAe,EAAE,GAAW,EAAE,OAA2B,EAAE,aAAuB;QACvF,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;OAQG;IAKH,iCAAQ,GAAR,UAAS,MAAc,EAAE,MAAc,EAAE,aAAuB,EAAE,OAA+B;QAC/F,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,mCAAU,GAAV,UAAW,QAAuC;QAChD,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,QAAQ,CAAC;IAC7C,CAAC;IAED;;;OAGG;IAIH,8BAAK,GAAL,cAAgB,CAAC;IACnB,qBAAC;AAAD,CA5DA,AA4DC,IAAA;AAtCC;IAJC,eAAe,CAAC;QACf,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;4CAGD;AAeD;IAJC,eAAe,CAAC;QACf,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;8CAGD;AAOD;IADC,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;gDAG7B;AASD;IAHC,eAAe,CAAC;QACf,IAAI,EAAE,IAAI;KACX,CAAC;;;;2CACe;AA3DN,cAAc;IAJ1B,MAAM,CAAC;QACN,MAAM,EAAE,8BAA8B;QACtC,UAAU,EAAE,cAAc;KAC3B,CAAC;;GACW,cAAc,CA4D1B;SA5DY,cAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CordovaInstance, Plugin, InstanceCheck, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\r\n\r\ndeclare const FileTransfer: any;\r\n\r\nexport interface FileUploadOptions {\r\n\r\n  /**\r\n   * The name of the form element.\r\n   * Defaults to 'file'.\r\n   */\r\n  fileKey?: string;\r\n\r\n  /**\r\n   * The file name to use when saving the file on the server.\r\n   * Defaults to 'image.jpg'.\r\n   */\r\n  fileName?: string;\r\n\r\n  /**\r\n   * The HTTP method to use - either PUT or POST.\r\n   * Defaults to POST.\r\n   */\r\n  httpMethod?: string;\r\n\r\n  /**\r\n   * The mime type of the data to upload.\r\n   * Defaults to image/jpeg.\r\n   */\r\n  mimeType?: string;\r\n\r\n  /**\r\n   * A set of optional key/value pairs to pass in the HTTP request.\r\n   */\r\n  params?: { [s: string]: any; };\r\n\r\n  /**\r\n   * Whether to upload the data in chunked streaming mode.\r\n   * Defaults to true.\r\n   */\r\n  chunkedMode?: boolean;\r\n\r\n  /**\r\n   * A map of header name/header values. Use an array to specify more\r\n   * than one value. On iOS, FireOS, and Android, if a header named\r\n   * Content-Type is present, multipart form data will NOT be used.\r\n   */\r\n  headers?: { [s: string]: any; };\r\n\r\n}\r\n\r\nexport interface FileUploadResult {\r\n\r\n  /**\r\n   * The number of bytes sent to the server as part of the upload.\r\n   */\r\n  bytesSent: number;\r\n\r\n  /**\r\n   * The HTTP response code returned by the server.\r\n   */\r\n  responseCode: number;\r\n\r\n  /**\r\n   * The HTTP response returned by the server.\r\n   */\r\n  response: string;\r\n\r\n  /**\r\n   * The HTTP response headers by the server.\r\n   */\r\n  headers: { [s: string]: any; };\r\n\r\n}\r\n\r\nexport interface FileTransferError {\r\n\r\n  /**\r\n   * One of the predefined error codes listed below.\r\n   */\r\n  code: number;\r\n\r\n  /**\r\n   * URL to the source.\r\n   */\r\n  source: string;\r\n\r\n  /**\r\n   * URL to the target.\r\n   */\r\n  target: string;\r\n\r\n  /**\r\n   * HTTP status code. This attribute is only available when a response\r\n   * code is received from the HTTP connection.\r\n   */\r\n  http_status: number;\r\n\r\n  /**\r\n   * Response body. This attribute is only available when a response is received from the HTTP connection.\r\n   */\r\n  body: string;\r\n\r\n  /**\r\n   * Either e.getMessage or e.toString.\r\n   */\r\n  exception: string;\r\n\r\n}\r\n\r\n/**\r\n * @name Transfer\r\n *\r\n * @description\r\n * This plugin allows you to upload and download files.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Transfer, FileUploadOptions, TransferObject } from '@ionic-native/transfer';\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * constructor(private transfer: Transfer, private file: File) { }\r\n *\r\n * ...\r\n *\r\n * const fileTransfer: TransferObject = this.transfer.create();\r\n *\r\n * // Upload a file:\r\n * fileTransfer.upload(..).then(..).catch(..);\r\n *\r\n * // Download a file:\r\n * fileTransfer.download(..).then(..).catch(..);\r\n *\r\n * // Abort active transfer:\r\n * fileTransfer.abort();\r\n *\r\n * // full example\r\n * upload() {\r\n *   let options: FileUploadOptions = {\r\n *      fileKey: 'file',\r\n *      fileName: 'name.jpg',\r\n *      headers: {}\r\n *      .....\r\n *   }\r\n *\r\n *   fileTransfer.upload('<file path>', '<api endpoint>', options)\r\n *    .then((data) => {\r\n *      // success\r\n *    }, (err) => {\r\n *      // error\r\n *    })\r\n * }\r\n **\r\n * download() {\r\n *   const url = 'http://www.example.com/file.pdf';\r\n *   fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\r\n *     console.log('download complete: ' + entry.toURL());\r\n *   }, (error) => {\r\n *     // handle error\r\n *   });\r\n * }\r\n *\r\n * ```\r\n *\r\n * To store files in a different/publicly accessible directory, please refer to the following link\r\n * https://github.com/apache/cordova-plugin-file#where-to-store-files\r\n *\r\n * @interfaces\r\n * FileUploadOptions\r\n * FileUploadResult\r\n * FileTransferError\r\n * @classes\r\n * TransferObject\r\n */\r\n@Plugin({\r\n  pluginName: 'FileTransfer',\r\n  plugin: 'cordova-plugin-file-transfer',\r\n  pluginRef: 'FileTransfer',\r\n  repo: 'https://github.com/apache/cordova-plugin-file-transfer'\r\n})\r\n\r\nexport class Transfer extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Error code rejected from upload with FileTransferError\r\n   * Defined in FileTransferError.\r\n   *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\r\n   *      INVALID_URL_ERR: 2,     Return when url was invalid\r\n   *      CONNECTION_ERR: 3,      Return on connection error\r\n   *      ABORT_ERR: 4,           Return on aborting\r\n   *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\r\n   * @enum {number}\r\n   */\r\n  FileTransferErrorCode = {\r\n    FILE_NOT_FOUND_ERR: 1,\r\n    INVALID_URL_ERR: 2,\r\n    CONNECTION_ERR: 3,\r\n    ABORT_ERR: 4,\r\n    NOT_MODIFIED_ERR: 5\r\n  };\r\n\r\n  /**\r\n   * Creates a new FileTransfer object\r\n   * @return {TransferObject}\r\n   */\r\n  create(): TransferObject {\r\n    return new TransferObject();\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-file-transfer',\r\n  pluginName: 'FileTransfer'\r\n})\r\nexport class TransferObject {\r\n  private _objectInstance: any;\r\n\r\n  constructor() {\r\n    if (checkAvailability('FileTransfer', null, 'FileTransfer') === true) {\r\n      this._objectInstance = new FileTransfer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a file to a server.\r\n   *\r\n   * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\r\n   * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\r\n   * @param {FileUploadOptions} options  Optional parameters.\r\n   * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\r\n   * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\r\n   */\r\n  @CordovaInstance({\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  upload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from server.\r\n   *\r\n   * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\r\n   * @param {stirng} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\r\n   * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\r\n   * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\r\n   * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\r\n   */\r\n  @CordovaInstance({\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  download(source: string, target: string, trustAllHosts?: boolean, options?: { [s: string]: any; }): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Registers a listener that gets called whenever a new chunk of data is transferred.\r\n   * @param listener {function} Listener that takes a progress event.\r\n   */\r\n  @InstanceCheck({ sync: true })\r\n  onProgress(listener: (event: ProgressEvent) => any): void {\r\n    this._objectInstance.onprogress = listener;\r\n  }\r\n\r\n  /**\r\n   * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\r\n   * object which has an error code of FileTransferError.ABORT_ERR.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  abort(): void { }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}