{"version":3,"sources":["../../../src/@ionic-native/plugins/toast/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport interface ToastOptions {\r\n  /**\r\n   * Message to display\r\n   */\r\n  message?: string;\r\n  /**\r\n   * Duration in ms to show\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * Position\r\n   */\r\n  position?: string;\r\n  /**\r\n   * Add negative value to move it up a bit\r\n   */\r\n  addPixelsY?: number;\r\n  /**\r\n   * Pass JSON object to be sent back in success callback\r\n   */\r\n  data?: any;\r\n  /**\r\n   * Styling\r\n   */\r\n  styling?: {\r\n    opacity?: number;\r\n    backgroundColor?: string;\r\n    textColor?: string;\r\n    cornerRadius?: number;\r\n    horizontalPadding?: number;\r\n    verticalPadding?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * @name Toast\r\n * @description\r\n * This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Toast } from '@ionic-native/toast';\r\n *\r\n * constructor(private toast: Toast) { }\r\n *\r\n * ...\r\n *\r\n * this.toast.show('I'm a toast', '5000', 'center').subscribe(\r\n *   toast => {\r\n *     console.log(toast);\r\n *   }\r\n * );\r\n * ```\r\n * @interfaces\r\n * ToastOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'Toast',\r\n  plugin: 'cordova-plugin-x-toast',\r\n  pluginRef: 'plugins.toast',\r\n  repo: 'https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin',\r\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\r\n})\r\n\r\nexport class Toast extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Show a native toast for the given duration at the specified position.\r\n   *\r\n   * @param {string} message  The message to display.\r\n   * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\r\n   * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  show(message: string, duration: string, position: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Manually hide any currently visible toast.\r\n   * @returns {Promise<any>} Returns a Promise that resolves on success.\r\n   */\r\n  @Cordova()\r\n  hide(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show a native toast with the given options.\r\n   *\r\n   * @param {Object} options  Options for showing a toast. Available options:\r\n   *   message  The message to display.\r\n   *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\r\n   *   position  Where to position the toast, either 'top', 'center', or 'bottom'.\r\n   *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.\r\n   *\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showWithOptions(options: ToastOptions): Observable<any> { return; }\r\n\r\n  /**\r\n   * Shorthand for `show(message, 'short', 'top')`.\r\n   * @param message {string}\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showShortTop(message: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Shorthand for `show(message, 'short', 'center')`.\r\n   * @param message {string}\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showShortCenter(message: string): Observable<any> { return; }\r\n\r\n\r\n  /**\r\n   * Shorthand for `show(message, 'short', 'bottom')`.\r\n   * @param message {string}\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showShortBottom(message: string): Observable<any> { return; }\r\n\r\n\r\n  /**\r\n   * Shorthand for `show(message, 'long', 'top')`.\r\n   * @param message {string}\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showLongTop(message: string): Observable<any> { return; }\r\n\r\n\r\n  /**\r\n   * Shorthand for `show(message, 'long', 'center')`.\r\n   * @param message {string}\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showLongCenter(message: string): Observable<any> { return; }\r\n\r\n\r\n  /**\r\n   * Shorthand for `show(message, 'long', 'bottom')`.\r\n   * @param message {string}\r\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'hide'\r\n  })\r\n  showLongBottom(message: string): Observable<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}